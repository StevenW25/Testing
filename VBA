uhSub LaunchEdgeAndSearchGoogle()
    Dim url As String
    Dim searchQuery As String
    Dim script As String
    Dim shell As Object
    
    ' URL to navigate to (Google)
    url = "https://www.google.com"
    
    ' Search query
    searchQuery = "Best Buy"
    
    ' PowerShell script to launch Edge, navigate to the URL, and perform search
    script = "Start-Process 'msedge.exe' '" & url & "'; " & _
             "Start-Sleep -Seconds 3; " & _
             "$wshell = New-Object -ComObject wscript.shell; " & _
             "Start-Sleep -Seconds 5; " & _
             "$wshell.SendKeys('^l'); " & _
             "Start-Sleep -Seconds 5; " & _
             "$wshell.SendKeys('^a'); " & _
            "Start-Sleep -Seconds 5; " & _
             "$wshell.SendKeys(''); " & _
            "Start-Sleep -Seconds 5; " & _
             "$wshell.SendKeys('" & url & "'); " & _
            "Start-Sleep -Seconds 5; " & _
             "$wshell.SendKeys('{ENTER}'); " & _
            "Start-Sleep -Seconds 2; " & _
             "$wshell.SendKeys('" & searchQuery & "'); " & _
             "$wshell.SendKeys('{ENTER}');"
    
    ' Create Shell object to run the PowerShell script
    Set shell = CreateObject("WScript.Shell")
    
    ' Run the PowerShell script
    shell.Run "powershell -Command " & Chr(34) & script & Chr(34), 1, True
    
    ' Clean up
    Set shell = Nothing
End Sub

javascript:(function() {
    var luckyButton = document.querySelector("[name='btnI']");
    if (luckyButton) {
        luckyButton.click();
    } else {
        alert("The 'I'm Feeling Lucky' button is not available on this page.");
    }
})();



# URL where the bookmarklet is used
$baseURL = "https://www.google.ca"

# JavaScript code for the bookmarklet (encoded as a URL)
$bookmarklet = "javascript:(function() { var luckyButton = document.querySelector('[name=btnI]'); if (luckyButton) { luckyButton.click(); } else { alert('The I''m Feeling Lucky button is not available on this page.'); } })();"

# Combine the base URL and bookmarklet
$fullURL = "$baseURL/$bookmarklet"

# Open Edge with the full URL
Start-Process "msedge.exe" $fullURL


# Path to Microsoft Edge executable (adjust as needed)
$edgePath = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"

# Launch Edge with remote debugging on port 9222
Start-Process $edgePath -ArgumentList "--remote-debugging-port=9222"


<!DOCTYPE html>
<html lang="en">
<head>
    <title>Auto Bookmarklet</title>
    <script>
        window.onload = function() {
            // Open the desired website
            window.location.href = "https://example.com";

            // Wait for the website to load and execute the bookmarklet code
            setTimeout(function() {
                // Your bookmarklet code here
                alert("Bookmarklet running!");
            }, 3000); // Adjust the delay as needed
        };
    </script>
</head>
<body>
    <p>Redirecting to the website...</p>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <title>Auto-Run JavaScript</title>
    <script>
        // Automatically load the website and inject JavaScript
        window.onload = function() {
            // Open the desired website
            const targetURL = "https://example.com"; // Replace with the target URL
            const jsCode = `
                // Your bookmarklet code here
                alert('JavaScript running!');
                document.body.style.border = '5px solid green';
            `;

            // Open the website in an iframe
            const iframe = document.createElement('iframe');
            iframe.src = targetURL;
            iframe.style = "width: 100%; height: 100vh; border: none;";
            document.body.appendChild(iframe);

            // Wait for the iframe to load and inject the script
            iframe.onload = function() {
                const script = iframe.contentDocument.createElement('script');
                script.textContent = jsCode;
                iframe.contentDocument.body.appendChild(script);
            };
        };
    </script>
</head>
<body>
    <p>Loading the website...</p>
</body>
</html>


edge://settings/defaultBrowser




& "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" --remote-debugging-port=9222





Sub ExecuteJavaScriptInEdge()
    Dim ws As Object
    Dim cmd As String
    Dim jsScript As String
    
    ' JavaScript code to execute
    jsScript = "document.body.style.backgroundColor = 'lightblue';"
    
    ' Command to execute PowerShell with the JavaScript
    cmd = "powershell -Command ""Invoke-RestMethod -Uri http://localhost:9222/json/execute -Method POST -Body '{""id"":1,""method"":""Runtime.evaluate"",""params"":{""expression"":""" & jsScript & """}}'"""
    
    ' Run the command
    Set ws = CreateObject("WScript.Shell")
    ws.Run cmd
End Sub

Sub OpenEdgeInIEMode()
    Dim ie As Object
    Set ie = CreateObject("InternetExplorer.Application")
    
    ' Make the browser visible
    ie.Visible = True
    
    ' Navigate to a URL
    ie.Navigate "https://www.google.com"
    
    ' Wait for the page to load
    Do While ie.Busy Or ie.ReadyState <> 4
        DoEvents
    Loop
    
    MsgBox "Page Title: " & ie.Document.Title
    
    ' Close the browser
    ie.Quit
    Set ie = Nothing
End Sub



Private Sub ExecuteJavaScript_Click()
    Dim jsCode As String

    ' Define your JavaScript code
    jsCode = "document.body.style.backgroundColor = 'yellow';"

    ' Call the ExecuteJavaScript method
    Me.EdgeBrowserControl.ExecuteJavaScript jsCode
End Sub


Option Explicit

Private Declare PtrSafe Function SetThreadExecutionState Lib "Kernel32.dll" (ByVal esFlags As Long) As Long

Const ES_SYSTEM_REQUIRED As Long = &H1
Const ES_DISPLAY_REQUIRED As Long = &H2
Const ES_CONTINUOUS As Long = &H80000000

' Enable away mode and prevent the sleep idle time-out. Called periodically this is needed (every 59 sec, change to longer interval if you want)
' I've this sub called in Workbook_Open
Public Sub PreventLocking()
    SetThreadExecutionState ES_CONTINUOUS Or ES_DISPLAY_REQUIRED Or ES_SYSTEM_REQUIRED
    Application.OnTime EarliestTime:=Now + TimeValue("00:00:59"), Procedure:="PreventLocking"
End Sub

' Clear flags to disable away mode and allow the system to idle to sleep normally.
' I've this sub called in Workbook_BeforeClose, but it would probably be fine even w/o it
Public Sub ClearLockingFlags()
    SetThreadExecutionState ES_CONTINUOUS
End Sub


Option Explicit

Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
    ByVal hWnd As LongPtr, _
    ByVal Operation As String, _
    ByVal Filename As String, _
    Optional ByVal Parameters As String, _
    Optional ByVal Directory As String, _
    Optional ByVal WindowStyle As Long = vbMinimizedFocus _
) As LongPtr

Public Sub OpenUrl()
    Dim lSuccess As LongPtr
    lSuccess = ShellExecute(0, "Open", "http://www.google.com")
    If lSuccess <= 32 Then
        MsgBox "Failed to open URL.", vbExclamation, "Error"
    End If
End Sub


Option Explicit

Private Declare PtrSafe Function OpenProcess Lib "kernel32" ( _
    ByVal dwDesiredAccess As Long, _
    ByVal bInheritHandle As Long, _
    ByVal dwProcessId As Long) As LongPtr

Private Declare PtrSafe Function TerminateProcess Lib "kernel32" ( _
    ByVal hProcess As LongPtr, _
    ByVal uExitCode As Long) As Long

Private Declare PtrSafe Function CloseHandle Lib "kernel32" ( _
    ByVal hObject As LongPtr) As Long

Private Const PROCESS_TERMINATE As Long = &H1

Public Sub OpenAndCloseShell()
    Dim taskID As Long
    Dim hProcess As LongPtr
    Dim success As Long
    
    ' Open a shell process (e.g., Notepad)
    taskID = Shell("notepad.exe", vbNormalFocus)
    
    ' Give some time for the process to start
    Application.Wait Now + TimeValue("00:00:03")
    
    ' Open the process with terminate rights
    hProcess = OpenProcess(PROCESS_TERMINATE, False, taskID)
    If hProcess = 0 Then
        MsgBox "Failed to get process handle.", vbExclamation, "Error"
        Exit Sub
    End If
    
    ' Terminate the process
    success = TerminateProcess(hProcess, 0)
    If success = 0 Then
        MsgBox "Failed to terminate process.", vbExclamation, "Error"
    Else
        MsgBox "Process terminated successfully.", vbInformation, "Success"
    End If
    
    ' Close the process handle
    CloseHandle hProcess
End Sub

Option Explicit

Private Declare PtrSafe Function OpenProcess Lib "kernel32" ( _
    ByVal dwDesiredAccess As Long, _
    ByVal bInheritHandle As Long, _
    ByVal dwProcessId As Long) As LongPtr

Private Declare PtrSafe Function TerminateProcess Lib "kernel32" ( _
    ByVal hProcess As LongPtr, _
    ByVal uExitCode As Long) As Long

Private Declare PtrSafe Function CloseHandle Lib "kernel32" ( _
    ByVal hObject As LongPtr) As Long

Private Const PROCESS_TERMINATE As Long = &H1

Dim BrowserTaskID As Long

' Function to open the browser with a URL
Public Function OpenBrowserWithUrl(ByVal url As String) As Long
    On Error GoTo ErrHandler
    ' Open the browser with the specified URL (adjust browser path as needed)
    BrowserTaskID = Shell("C:\Program Files\Google\Chrome\Application\chrome.exe " & url, vbNormalFocus)
    OpenBrowserWithUrl = BrowserTaskID
    Exit Function
ErrHandler:
    MsgBox "Failed to open browser: " & Err.Description, vbExclamation, "Error"
    OpenBrowserWithUrl = 0
End Function

' Function to close the browser process
Public Function CloseBrowser(ByVal processID As Long) As Boolean
    Dim hProcess As LongPtr
    Dim success As Long
    
    On Error GoTo ErrHandler
    ' Open the process with terminate rights
    hProcess = OpenProcess(PROCESS_TERMINATE, False, processID)
    If hProcess = 0 Then
        MsgBox "Failed to get process handle.", vbExclamation, "Error"
        CloseBrowser = False
        Exit Function
    End If
    
    ' Terminate the process
    success = TerminateProcess(hProcess, 0)
    If success = 0 Then
        MsgBox "Failed to terminate process.", vbExclamation, "Error"
        CloseBrowser = False
    Else
        MsgBox "Browser closed successfully.", vbInformation, "Success"
        CloseBrowser = True
    End If
    
    ' Close the process handle
    CloseHandle hProcess
    Exit Function
ErrHandler:
    MsgBox "Error while closing browser: " & Err.Description, vbExclamation, "Error"
    CloseBrowser = False
End Function

' Example usage
Public Sub TestBrowserFunctions()
    Dim url As String
    Dim taskID As Long
    Dim success As Boolean
    
    url = "https://www.google.com"
    
    ' Open the browser
    taskID = OpenBrowserWithUrl(url)
    If taskID = 0 Then Exit Sub
    
    ' Wait for 5 seconds before closing
    Application.Wait Now + TimeValue("00:00:05")
    
    ' Close the browser
    success = CloseBrowser(taskID)
End Sub

Option Explicit

Private Const PROCESS_TERMINATE As Long = &H1

Private Declare PtrSafe Function OpenProcess Lib "kernel32" ( _
    ByVal dwDesiredAccess As Long, _
    ByVal bInheritHandle As Long, _
    ByVal dwProcessId As Long) As LongPtr

Private Declare PtrSafe Function TerminateProcess Lib "kernel32" ( _
    ByVal hProcess As LongPtr, _
    ByVal uExitCode As Long) As Long

Private Declare PtrSafe Function CloseHandle Lib "kernel32" ( _
    ByVal hObject As LongPtr) As Long

Dim BrowserCommandLine As String

' Function to open Microsoft Edge with a URL
Public Function OpenBrowserWithUrl(ByVal url As String) As String
    On Error GoTo ErrHandler
    Dim shellCommand As String
    shellCommand = """C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"" " & url
    Shell shellCommand, vbNormalFocus
    BrowserCommandLine = shellCommand
    OpenBrowserWithUrl = shellCommand
    Exit Function
ErrHandler:
    MsgBox "Failed to open browser: " & Err.Description, vbExclamation, "Error"
    OpenBrowserWithUrl = vbNullString
End Function

' Function to close Edge using WMI by matching the command line
Public Function CloseBrowser(ByVal commandLine As String) As Boolean
    Dim objWMIService As Object
    Dim colProcesses As Object
    Dim objProcess As Object
    Dim hProcess As LongPtr
    Dim success As Long
    
    On Error GoTo ErrHandler
    
    ' Connect to WMI
    Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
    Set colProcesses = objWMIService.ExecQuery("SELECT * FROM Win32_Process WHERE CommandLine LIKE '%" & commandLine & "%'")
    
    ' Loop through processes and terminate
    For Each objProcess In colProcesses
        hProcess = OpenProcess(PROCESS_TERMINATE, False, objProcess.ProcessId)
        If hProcess <> 0 Then
            success = TerminateProcess(hProcess, 0)
            CloseHandle hProcess
        End If
    Next objProcess
    
    MsgBox "Browser closed successfully.", vbInformation, "Success"
    CloseBrowser = True
    Exit Function
ErrHandler:
    MsgBox "Failed to close browser: " & Err.Description, vbExclamation, "Error"
    CloseBrowser = False
End Function

' Example usage
Public Sub TestBrowserFunctions()
    Dim url As String
    Dim commandLine As String
    Dim success As Boolean
    
    url = "https://www.google.com"
    
    ' Open the browser
    commandLine = OpenBrowserWithUrl(url)
    If commandLine = vbNullString Then Exit Sub
    
    ' Wait for 5 seconds before closing
    Application.Wait Now + TimeValue("00:00:05")
    
    ' Close the browser
    success = CloseBrowser(commandLine)
End Sub

Sub ClickImFeelingLuckyAndClose()
    Dim webDoc As Object
    Dim windowTitle As String
    Dim jsCode As String

    ' Set the title of the target Edge IE Mode window
    windowTitle = "Google" ' Change to match the title of your Google browser window

    ' JavaScript code to click the "I'm Feeling Lucky" button
    jsCode = "document.querySelector('input[name=""btnI""]').click();"

    ' Get the DOM object
    Set webDoc = GetEdgeIeDOM(windowTitle)
    
    If Not webDoc Is Nothing Then
        ' Execute the JavaScript
        On Error Resume Next
        webDoc.parentWindow.execScript jsCode, "JavaScript"
        If Err.Number <> 0 Then
            MsgBox "Error executing JavaScript: " & Err.Description, vbCritical
        Else
            MsgBox "Clicked 'I'm Feeling Lucky' successfully!", vbInformation
        End If
        On Error GoTo 0
        
        ' Close the Google window
        If ieHwnd <> 0 Then
            CloseWindow ieHwnd
            MsgBox "Closed Google.com window successfully!", vbInformation
        Else
            MsgBox "Unable to retrieve the window handle for closing.", vbExclamation
        End If
    Else
        MsgBox "Unable to retrieve the DOM object. Ensure the window is open and accessible.", vbExclamation
    End If
End Sub

Sub CloseWindow(ByVal hwnd As LongPtr)
    ' Sends WM_CLOSE to the specified window handle
    Const WM_CLOSE As Long = &H10
    Dim result As Long

    result = SendMessage(hwnd, WM_CLOSE, 0&, 0&)
End Sub
